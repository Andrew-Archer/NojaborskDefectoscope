/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.npptmk.guiObjects;

import java.awt.Component;
import java.awt.EventQueue;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Эта панель является универсальным контейнером для размещения различных
 * средств отображения данных.<br>
 * Каждый компонент должен наследоваться от класса {@code Component} и
 * поддерживать интерфейс {@code IDrvsDataReader}. Все компоненты распологаются
 * на экране вертикально в заданном порядке.<br>
 * Для управления процессом создания средств отображения используется объект,
 * поддерживающий интерфейс {@code IPanelFactory}. В отличии от данного класса,
 * являющегося универсальным, объект, реализующий интерфейс
 * {@code IPanelFactory} разрабатывается для каждого приложения в отдельности с
 * учетом всей специфики применения средств отображения в рамках данного
 * приложения.<br><br>
 * Порядок использования данного объекта.<br><br>
 * Для того, чтобы средство отображения появилось на данной панели необходимо
 * его параметры поместить в коллекцию параметров данной панели. После чего
 * вызвать метод {@code redrawPanels()}. Параметры средства отображения могут
 * быть получены внешней программой с помощью соответствующих методов объекта
 * {@code IPanelFactory}. В процессе выполнения метода {@code redrawPanels()}
 * этот объект обращается к {@code IPanelFactory} с параметрами средства
 * отображения, на основании которых {@code IPanelFactory} создает требуемый
 * компонент и возвращает его данному объекту.<br>
 * Для удаления средств отображения с панели, или изменения порядка их
 * следования необходимо отредактировать соотвествующим образом коллекцию
 * параметров и снова вызвать метод {@code redrawPanels()}.<br>
 * Для изменения настроек существующего средства отображения используется метод
 * {@code editParams}. Этот метод обращается к {@code IPanelFactory} с запросом
 * на редактирование соответствующих параметров, после чего сам обновляет
 * необходимый компонент.<br>
 * Данный объект имеет метод {@code updateGrafs()}. Этот метод вызывают
 * драйверы, или другие источники данных, в моменты появления новых данных,
 * чтобы обновить средства отображения данных. Он должен вызываться из потока
 * обновления экранных компонент {@code EventQueue.invokeLater}.
 *
 * @author SmorkalovAV
 */
public class PanelForGraphics extends javax.swing.JPanel {

    private final List<IDrvsDataReader> pnls = new ArrayList<>();   // Коллекция средств отображения.
    private final List<Serializable> currConf;          // Коллекция параметров средств отображения.
    private final IPanelFactory pnlFactory;             // Построитель средств отображения.

    /**
     * Конструктор панели.
     *
     * @param fct Объект построитель средств отображения.
     * @param prm Исходная коллекция параметров средств отображения.
     */
    public PanelForGraphics(IPanelFactory fct, List<Serializable> prm) {
        initComponents();
        pnlFactory = fct;
        currConf = new ArrayList<>();
        currConf.addAll(prm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Обновление компонент отображения данных.<br>
     * Эта функция для вызова обновлений экрана из потока обработки
     * событий awt. Она не использует {@code invokeLater()}.
     * @param driver Источник обновляемых данных.
     */
    
    public void updateGrafs(IScanDataProvider driver) {
        for (IDrvsDataReader pn : pnls) {
            pn.dataForGrphs(driver);
        }

    }

    /**
     * Возвращает коллекцию параметров средств отображения.<br>
     * Вызывающая программа может отредактировать коллекцию. Для того, чтобы
     * изменения отобразились на экране необходимо вызвать метод
     * {@code redrawPanels}.
     *
     * @return Коллекция параметров средств отображения.
     */
    public List<Serializable> getParamCollection() {
        return currConf;
    }

    /**
     * Устанавливает новую коллекцию параметров средств отображения.
     *
     * @param pc новая коллекция параметров средств отображения.
     */
    public void setParamCollection(List<Serializable> pc) {
        currConf.clear();
        currConf.addAll(pc);
    }

    /**
     * Метод вызывает обновление панели в соответствии с текущим состоянием
     * коллекции параметров.
     */
    public final void redrawPanels() {
        removeAll();
        pnls.removeAll(pnls);
        int posV = 0;
        for (Serializable pr : currConf) {
            IDrvsDataReader pn = pnlFactory.getPanel(this, posV++);
            add((Component) pn);
            pnls.add(pn);
        }
    }

    /**
     * Метод интерактивного редактирования настроект отдельного средства
     * отображения информации.<br>
     * Собственно диалог с пользователем обеспечивает {@code IPanelFactory}.
     * Данный метод обеспечивает его вызов и обновление панели после изменения
     * параметров.
     *
     * @param i индекс компонента, подлежащего изменению настроек.
     */
    public void editParams(int i) {
        if (i < 0 || i >= currConf.size()) {
            return;
        }
        Serializable oldPar = currConf.get(i);
        Serializable newPar = pnlFactory.getPanelParams(oldPar);
        if (newPar != null) {
            currConf.set(i, newPar);
            redrawPanels();
        }
    }

}
