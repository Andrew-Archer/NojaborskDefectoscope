/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.npptmk.guiObjects;

import java.awt.Color;
import java.awt.Graphics;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/**
 * Компонет представляет собой панельку c отрисовкой трубы с дефектами. <br>
 * Компонент предполагает использование в составе специальной панели
 * {@link  PanelForGraphics}<br>
 * Визуальное отображение трубы представляет собой сетку с вертикльными линиями
 * через один метр и нарисованная труба заданной длины с нанесенными на ней
 * вертикальными линиями, показывающими области с дефектами.<br>
 * Панелька реализует интерфейс {@link  IDrvsDataReader}, так как предназначена
 * для приема данных от драйверов.<br>
 * Предполагается что методами интерфейса {@code  ITubeDataProvider} возращает
 * длину и позицию дефектов в одной системе координат.<br>
 * В составе компонента имеются кнопки позволяющие пользователю выполнять
 * следующие операции:
 * <ul>
 * <li> Удаление компонента из объекта {@code PanelForGraphics}.
 * <li> Перемещение компонента вверх и вниз в коллекции аналогичных компонентов
 * объекта {@code PanelForGraphics}.
 * <li> Изменение настроек данного компонента.
 * </ul>
 */
public class TubePnl extends javax.swing.JPanel implements IDrvsDataReader {

    public int visiblePos;
    private final PanelForGraphics parentPnl;
    private final PaintTube tb = new PaintTube(12);
    public final Color[] colors;
    public final String[] names;
    public final boolean[] visibles;
    private final long[] devIds;
    private final int[] chanIds;
    private int curLen = 0;         // Текущая дина трубы в мм.
    private HashMap<Integer, Color> def;
    private ITubeDataProvider dp;

    /**
     * Конструктор панели самописцев.
     *
     * @param prn универсальный контейнер средств отображения данных.
     * @param ind индекс панельки в коллекции параметров.
     */
    public TubePnl(PanelForGraphics prn, int ind) {
        parentPnl = prn;
        TubeGrphParams par = (TubeGrphParams) prn.getParamCollection().get(ind);
        colors = Arrays.copyOf(par.clrs, par.clrs.length);
        names = Arrays.copyOf(par.names, par.names.length);
        visibles = new boolean[3];
        Arrays.fill(visibles, true);
        HashMap<Integer, Color> tbp = new HashMap<>();
        for (int i = 0; i < colors.length; i++) {
            tbp.put(i, colors[i]);
        }
        devIds = Arrays.copyOf(par.devIds, par.devIds.length);
        chanIds = Arrays.copyOf(par.cahsnIds, par.cahsnIds.length);
        initComponents();
        tb.prm = tbp;
        frSmGr.setIcon(tb);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frSmGr = new javax.swing.JLabel();
        frBtCls = new javax.swing.JButton();
        frBtUp = new javax.swing.JButton();
        frBtDvn = new javax.swing.JButton();
        frBtPrp = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(32767, 60000));
        setMinimumSize(new java.awt.Dimension(0, 100));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(100, 116));

        frSmGr.setBackground(new java.awt.Color(255, 255, 255));
        frSmGr.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        frSmGr.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        frSmGr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                frSmGrMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                frSmGrMouseReleased(evt);
            }
        });

        frBtCls.setIcon(new javax.swing.ImageIcon(getClass().getResource("/042-cancel.png"))); // NOI18N
        frBtCls.setMargin(new java.awt.Insets(0, 0, 0, 0));
        frBtCls.setMaximumSize(new java.awt.Dimension(32, 32));
        frBtCls.setMinimumSize(new java.awt.Dimension(32, 32));
        frBtCls.setPreferredSize(new java.awt.Dimension(32, 32));
        frBtCls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frBtClsActionPerformed(evt);
            }
        });

        frBtUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/006-up-arrow-2.png"))); // NOI18N
        frBtUp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        frBtUp.setMaximumSize(new java.awt.Dimension(32, 32));
        frBtUp.setMinimumSize(new java.awt.Dimension(32, 32));
        frBtUp.setPreferredSize(new java.awt.Dimension(32, 32));
        frBtUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frBtUpActionPerformed(evt);
            }
        });

        frBtDvn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/035-down-arrow-2.png"))); // NOI18N
        frBtDvn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        frBtDvn.setMaximumSize(new java.awt.Dimension(32, 32));
        frBtDvn.setMinimumSize(new java.awt.Dimension(32, 32));
        frBtDvn.setPreferredSize(new java.awt.Dimension(32, 32));
        frBtDvn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frBtDvnActionPerformed(evt);
            }
        });

        frBtPrp.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        frBtPrp.setText("...");
        frBtPrp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        frBtPrp.setMaximumSize(new java.awt.Dimension(32, 32));
        frBtPrp.setMinimumSize(new java.awt.Dimension(32, 32));
        frBtPrp.setPreferredSize(new java.awt.Dimension(32, 32));
        frBtPrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frBtPrpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frBtCls, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frBtUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frBtDvn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frBtPrp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(frSmGr, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(frBtCls, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(frBtUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frBtDvn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frBtPrp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(frSmGr, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void frBtClsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frBtClsActionPerformed
        List<Serializable> op = parentPnl.getParamCollection();
        op.remove(visiblePos);
        parentPnl.redrawPanels();
    }//GEN-LAST:event_frBtClsActionPerformed

    private void frBtUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frBtUpActionPerformed
        List<Serializable> op = parentPnl.getParamCollection();
        if (visiblePos > 0) {
            Serializable el = op.get(visiblePos);
            op.set(visiblePos, op.get(visiblePos - 1));
            op.set(visiblePos - 1, el);
            parentPnl.redrawPanels();
        }
    }//GEN-LAST:event_frBtUpActionPerformed

    private void frBtDvnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frBtDvnActionPerformed
        List<Serializable> op = parentPnl.getParamCollection();
        if (visiblePos < op.size() - 1) {
            Serializable el = op.get(visiblePos);
            op.set(visiblePos, op.get(visiblePos + 1));
            op.set(visiblePos + 1, el);
            parentPnl.redrawPanels();
        }
    }//GEN-LAST:event_frBtDvnActionPerformed

    private void frBtPrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frBtPrpActionPerformed
        parentPnl.editParams(visiblePos);
    }//GEN-LAST:event_frBtPrpActionPerformed

    private void frSmGrMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frSmGrMousePressed
        if (evt.isPopupTrigger()){
            processPopUp();
        }
    }//GEN-LAST:event_frSmGrMousePressed

    private void frSmGrMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frSmGrMouseReleased
        if (evt.isPopupTrigger()){
            processPopUp();
        }
    }//GEN-LAST:event_frSmGrMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton frBtCls;
    private javax.swing.JButton frBtDvn;
    private javax.swing.JButton frBtPrp;
    private javax.swing.JButton frBtUp;
    private javax.swing.JLabel frSmGr;
    // End of variables declaration//GEN-END:variables

    /**
     * Обработка данных от источника данных.<br>
     * Ограничение. Предполагается, что все дефекты поступают от одного
     * источника.
     *
     * @param data
     */
    @Override
    public void dataForGrphs(IScanDataProvider data) {
        if (data instanceof ITubeDataProvider) {
            dp = (ITubeDataProvider) data;
            updateTube();
            tb.setLength(curLen, def);
            tb.repaint();
        }
    }

    @Override
    public void repaint() {
        updateTube();
        super.repaint(); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * Отображение окна для выбора списка отображаемых графиков.
     */
    private void processPopUp(){
        TubeVisibilityDialog dg = new TubeVisibilityDialog(this);
        dg.setVisible(true);
    }

    private void updateTube() {
        if (def == null) {
            def = new HashMap<>();
        } else {
            def.clear();
        }
        if(devIds != null){
            for (int i = 0; i < devIds.length; i++) {
                if (dp != null && dp.getDeviceId() == devIds[i]) {
                    int tmpLen = dp.getTubeLength();
                    if (tmpLen != curLen) {
                        curLen = tmpLen;
                        if (curLen == 0) {
                            tb.maxLenTube = 12000;
                        } else {
                            tb.maxLenTube = (Math.round((float) curLen / 1000f) + 1) * 1000;
                        }
                    }
                    float[] x = dp.getDefects(chanIds[i]);
                    if (x != null) {
                        for (int j = 0; j < x.length; j++) {
                            if (visibles[i]) {
                                def.put((int) x[j], colors[i]);
                            }
                        }
                    }
                }
            }
        }
    }

}
