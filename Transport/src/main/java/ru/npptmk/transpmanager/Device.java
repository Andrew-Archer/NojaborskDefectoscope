/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.npptmk.transpmanager;

import java.io.Serializable;
import java.util.List;

/**
 * Абстрактный класс установок.
 * @author SerpokrylovDV
 */
public abstract class Device {

    /** Расположение детали по умолчанию на установке*/
    public final static int DEFAULT_VALUE = Integer.MAX_VALUE;
    protected DeviceEnt ent;
    protected final TranspManager tm;
    /**
     * Создает класс установки.<br>
     * Класс реализует добавление детали по расположению или выдачу 
     * детали по номеру ее расположения на установке. Поведение деталей
     * внутри установки, связанное с этими изменениями реализует наследующий
     * класс переопределив методы.
     * При удалении или добавлении детали с установки в качестве параметра задана 
     * позиция на установке, если в качестве позиции задано значение 
     * {@code Integer.MAX_VALUE}, то добавление или удаление детали происходит с 
     * позиции "по умолчанию".
     * @param tm транспортный менеджер, который сохраняет изменения в базу.
     */
    public Device(TranspManager tm) {
        this.tm = tm;
    }
    /**
     * Добавление размещения детали на установку.<br>
     * Этот метод вызывает транспортный менеджер при добавлении
     * детали на установку. В качестве параметров передается старое расположение
     * и новая позиция. Перед вызовом этого метода менеджер создает
     * событие, записывает его в базу данных (поле {@code TranspManager.evt}) и 
     * открывает транзакцию. В процессе работы метод должен:<ul>
     * <li> Добавить расположение в указанную позицию локальной коллекции расположений.
     * <li> Привести в соответствие значение позиции элементов коллекции и позиции в коллекции.
     * <li> Использовать метод {@code TranspManager.updateLocation} для изменения данных и 
     * передать в параметрах старое расположение и новые значения позиции и идентификатора установки. 
     * Этот метод нельзя вызывать более двух раз для одного расположения.
     * <li> При удачном завершении вернуть true, иначе вернуть false.</ul>
     * При неудачном завершении метода транзакция отменится менеджером и будет
     * вызван метод {@code Device.refreshDev} для обновления коллекции расположений.
     * Если в поле {@code LocaitionEnt.position} задано {@code Device.DEFAULT_VALUE}, 
     * то деталь добавляется в позицию "по умолчанию".
     * @param loc размещение детали на установке.
     * @param position номер позиции на установке.
     * @return {@code true} если все прошло удачно.
     * {@code false} если возникла ошибка, описание ошибки вернет метод {@code TranspManager.getError}.
     */
    public abstract boolean addLocation(LocationEnt loc, int position);
    /**
     * Удаление размещения детали с установки.<br>
     * Этот метод вызывает транспортный менеджер при удалении
     * детали с установки. В качестве параметра передается позиция детали. 
     * Перед вызовом этого метода менеджер создает событие (поле {@code TranspManager.evt}), 
     * которое записывает в базу данных  и открывает транзакцию. В процессе работы метод должен:<ul>
     * <li> Добавить расположение в указанную позицию локальной коллекции расположений.
     * <li> Привести в соответствие значение позиции элементов коллекции и позиции в коллекции.
     * <li> Для изменения данных использовать метод {@code TranspManager.updateLocation},
     * в параметрах передать старое расположение и новые значения позиции и идентификатора установки. 
     * Метод нельзя вызывать более двух раз для одного расположения.
     * <li> При удачном завершении вернуть true, иначе вернуть false.</ul>
     * При неудачном завершении транзация отменится менеджером и будет
     * вызван метод {@code Device.refreshDev} для обновления коллекции расположений.<br>
     * Если в поле {@code LocaitionEnt.position} задано {@code Device.DEFAULT_VALUE}, 
     * то деталь будет удалена с позиции "по умолчанию".<br>
     * @param pos позиция детали на установке.
     * @return Если все удачно, то вернет удаленное размещение.
     * Если возникла ошибка, то вернет {@code null} и описание ошибки вернет метод {@code TranspManager.getError}.
     */
    public abstract LocationEnt remLocation(int pos);
    
    /**
     * Удаление размещений всех деталей с установки.<br>
     * Этот метод вызывает транспортный менеджер при удалении
     * деталей с установки. Перед вызовом этого метода менеджер создает событие (поле {@code TranspManager.evt}), 
     * которое записывает в базу данных и открывает транзакцию. В процессе работы метод должен:<ul>
     * <li> Удалить значение всех размещений в коллекции.
     * <li> При удачном завершении вернуть коллекцию размещений установки, иначе вернуть ошибку.</ul>
     * @return Если всё прошло удачно, вернет коллекцию размещений.
     * Если возникла ошибка, то вернет описание ошибки, методом {@code TranspManager.getError}.
     */
    public abstract List<LocationEnt> clearAllLoc();
    /**
     * Возвращает текущее количество деталей на установке.
     * @return текущее количество деталей.
     */

    public abstract int getCountDetails();

    /**
     * Инициирует поле базового класса переданной сущностью.<br>
     * Заносит расположения из сущности в локальную коллекцию установки.<br>
     * Этот метод вызывается транспортным менеджером после создания установки для
     * инициализации.<br>
     * Перед вызовом этого метода менеджер создает событие (поле {@code TranspManager.evt}), 
     * записывает его в базу данных и открывает транзакцию. В процессе работы метод должен:<ul>
     * <li> Сохранить переданную сущность в переменную {@code Device.ent}.
     * <li> Очистить локальную коллекцию размещений деталей.
     * <li> Заполнить коллекцию новыми данными размещений.
     * <li> Привести в соответствие значение позиции элементов коллекции и позиции в коллекции.
     * <li> Для изменения данных использовать метод {@code TranspManager.updateLocation},
     * в параметрах передать старое расположение и новые значения позиции и идентификатора установки.
     * Метод нельзя вызывать более двух раз для одного расположения.
     * <li> при удачном завершении возвращает true, иначе false.</ul>
     * При неудачном завершении, транзакция отменится менеджером и им же будут приняты
     * меры для прекращения текущей работы.<br>
     * @param dv новые данные установки.
     * @return {@code true} если все прошло удачно.
     * {@code false}, описание ошибки вернет метод {@code TranspManager.getError}.
     */
    public abstract boolean refreshDev(DeviceEnt dv);
    /**
     * Возвращает идентификатор детали.<br>
     * Если в параметрах передано {@code Device.DEFAULT_VALUE}, то метод
     * должен вернуть идентификатор детали с размещения в позиции для удаления.
     * @param position позиция расположения детали на установке.
     * @return {@code idDet} идентификатор детали при удачном завершении.
     * {@code 0} при неудачном завершении.
     */
    public abstract long getIdDet(int position);
    /**
     * Возвращает параметры установки
     * @return {@code param} параметры установки.
     */
    public Serializable getParam() {
        return ent.getParam();
    }
    /**
     * Возвращает название установки
     * @return {@code name} название установки.
     */
    public String getName() {
        return ent.getName();
    }
    /**
     * Устанавливает параметры установки 
     * @param param параметры установки.
     */
    public void setParam(Serializable param) {
        ent.setParam(param);
    }
    /**.
     * Меняет название установки
     * @param name название установки.
     */
    public void setName(String name) {
        ent.setName(name);
    }
    
    /**
     * Показывает максимальное кол-во деталей на установке.
     * @return {@code maxDet} максимальное кол-во деталей на установке.
     */
    public int getMaxDet() {
        return ent.getMaxDet();
    }
    
    /**
     * Устанавливает максимальное кол-во деталей.
     * @param maxDet максимальное кол-во деталей.
     */
    public void setMaxDet(int maxDet) {
        ent.setMaxDet(maxDet);
    }
    
    /**
     * Показывает флаг доступности установки.
     * @return {@code true} запрещены операции удаления детали с установки.
     * {@code false} разрешены операции удаления деталей с установки.
     */
    public boolean isBusy() {
        return ent.isBusy();
    }
    
    /**
     * Устанавливает флаг доступности установки.
     * @param fl флаг доступности установки.
     * {@code true} запрещены операции удаления детали с установки.
     * {@code false} разрешены операции удаления деталей с установки.
     */
    public void setBusy(boolean fl) {
        ent.setBusy(fl);
    }
    
    /**
     * Возвращает идентификатор установки.  
     * @return {@code idDev} идентификтор установки.
     */
    public long getIdDev() {
        return ent.getIdDev();
    }

    @Override
    public String toString() {
        return getName(); //To change body of generated methods, choose Tools | Templates.
    }


}
    
